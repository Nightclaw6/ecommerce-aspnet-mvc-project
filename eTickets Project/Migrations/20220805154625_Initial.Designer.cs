// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eTickets_Project.Data;

namespace eTickets_Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220805154625_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eTickets_Project.Models.Lineup", b =>
                {
                    b.Property<int>("BandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BandBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BandLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BandId");

                    b.ToTable("Lineups");
                });

            modelBuilder.Entity("eTickets_Project.Models.Lineup_Festivals", b =>
                {
                    b.Property<int>("LineupId")
                        .HasColumnType("int");

                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.HasKey("LineupId", "FestivalId");

                    b.HasIndex("FestivalId");

                    b.ToTable("Lineups_Festivals");
                });

            modelBuilder.Entity("eTickets_Project.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("eTickets_Project.Models.MusicFestivals", b =>
                {
                    b.Property<int>("FestivalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FestivalDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FestivalLogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FestivalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FestivalId");

                    b.HasIndex("LocationId");

                    b.ToTable("Festivals");
                });

            modelBuilder.Entity("eTickets_Project.Models.Lineup_Festivals", b =>
                {
                    b.HasOne("eTickets_Project.Models.MusicFestivals", "Festival")
                        .WithMany("Lineups_Festivals")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTickets_Project.Models.Lineup", "Lineup")
                        .WithMany("Lineups_Festivals")
                        .HasForeignKey("LineupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Festival");

                    b.Navigation("Lineup");
                });

            modelBuilder.Entity("eTickets_Project.Models.MusicFestivals", b =>
                {
                    b.HasOne("eTickets_Project.Models.Location", "Location")
                        .WithMany("MusicFestivals")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("eTickets_Project.Models.Lineup", b =>
                {
                    b.Navigation("Lineups_Festivals");
                });

            modelBuilder.Entity("eTickets_Project.Models.Location", b =>
                {
                    b.Navigation("MusicFestivals");
                });

            modelBuilder.Entity("eTickets_Project.Models.MusicFestivals", b =>
                {
                    b.Navigation("Lineups_Festivals");
                });
#pragma warning restore 612, 618
        }
    }
}
